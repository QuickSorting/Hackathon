{
    "nodes": [
        {
            "id": "1",
            "label": "RepoParser",
            "additionalInfoLong": "**Purpose:** The `RepoParser` class is responsible for analyzing a Python software repository by parsing its files to establish relationships among classes and their dependencies. It uses the `.gitignore` file to filter out paths that should be ignored during the analysis, collects mappings of functions to their respective classes, and detects dependencies between classes based on method calls. In addition, it generates descriptions for each class by utilizing an external API, enabling an integrated and structured understanding of the codebase.",
            "additionalInfoShort": "RepoParser analyzes Python repositories to establish class relationships.",
            "hidden": false
        },
        {
            "id": "2",
            "label": "ClassFunctionVisitor",
            "additionalInfoLong": "**Purpose:** The `ClassFunctionVisitor` is a custom AST (Abstract Syntax Tree) node visitor that traverses Python class definitions in source code. Its primary responsibility is to collect information about the methods defined within each class, creating a mapping from method names to their respective class names. This visitor assumes that function names are unique across all classes, allowing it to effectively track which methods belong to which classes while also storing the source code of each class for further analysis or documentation purposes.",
            "additionalInfoShort": "ClassFunctionVisitor maps methods to classes in Python source code.",
            "hidden": false
        },
        {
            "id": "3",
            "label": "DependencyVisitor",
            "additionalInfoLong": "**Purpose:** The `DependencyVisitor` class is designed to analyze the structure of Python code, specifically focusing on class methods, to determine dependencies between classes based on function calls. It operates as a second-pass visitor in an abstract syntax tree (AST) traversal, utilizing a mapping of function names to their corresponding classes obtained from a prior analysis. By inspecting `Call` nodes in the AST, the class identifies which classes are dependent on others based on the function calls made within the methods of the currently processed class, thereby building a comprehensive record of inter-class dependencies.",
            "additionalInfoShort": "The `DependencyVisitor` analyzes class method dependencies in Python code.",
            "hidden": false
        },
        {
            "id": "4",
            "label": "OpenAIChatClient",
            "additionalInfoLong": "**Purpose:** The `OpenAIChatClient` class is designed to facilitate interaction with the OpenAI API to generate chat-based completions. It initializes with an API key to create a client instance, sends user inputs to the API to retrieve responses generated by a specified model (in this case, 'gpt-4o-mini'), and handles any potential errors during the API request process, returning the results as strings for further use.",
            "additionalInfoShort": "The OpenAIChatClient class connects users to OpenAI's chat API.",
            "hidden": false
        },
        {
            "id": "5",
            "label": "Main",
            "additionalInfoLong": "**Purpose:** The `Main` class serves as the entry point for a program that analyzes class dependencies in a software repository. It utilizes a `RepoParser` instance to read and construct dependency information about classes in a specified directory, then formats this data using an `OutputReformatter` instance. The class processes the dependencies, generates a structured representation of them, and saves the result as a JSON file named 'formatted_output.json', effectively enabling users to visualize and work with class relationships within their codebase.",
            "additionalInfoShort": "Main class analyzes class dependencies and outputs JSON file.",
            "hidden": false
        },
        {
            "id": "6",
            "label": "OutputReformatter",
            "additionalInfoLong": "**Purpose:** The `OutputReformatter` class is designed to reformat and organize class-related data into a structured format suitable for graph representation, specifically focusing on classes and their dependencies. It takes an input dictionary that maps class names to their descriptions and dependencies, processes this information to create a list of nodes and edges that represent the relationships between classes, and provides methods to output this structured data and save it to a JSON file for further use, such as visualization or analysis.",
            "additionalInfoShort": "OutputReformatter organizes class data for graph representation and analysis.",
            "hidden": false
        }
    ],
    "edges": [
        {
            "id": "e1",
            "source": "1",
            "target": "4"
        },
        {
            "id": "e2",
            "source": "5",
            "target": "6"
        },
        {
            "id": "e3",
            "source": "5",
            "target": "1"
        }
    ]
}