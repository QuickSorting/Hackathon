{
    "nodes": [
        {
            "id": "1",
            "label": "RepoParser",
            "additionalInfoLong": "**Purpose:** The `RepoParser` class is designed to analyze a Python software repository by parsing its codebase to map functions to their containing classes and analyze dependencies between those classes based on method calls. It accomplishes this by reading files while respecting `.gitignore` rules, facilitating the generation of human-readable descriptions of the classes and their dependencies using an external API, thus aiding developers in understanding the structure and relationships within the codebase.",
            "additionalInfoShort": "The `RepoParser` class analyzes a Python software repository by mapping functions to their classes and examining class dependencies through method calls, while adhering to `.gitignore` rules, to generate human-readable descriptions that help developers understand the codebase structure and relationships.",
            "hidden": false
        },
        {
            "id": "2",
            "label": "ClassFunctionVisitor",
            "additionalInfoLong": "**Purpose:** The `ClassFunctionVisitor` class is designed to traverse an Abstract Syntax Tree (AST) representation of Python code, specifically focusing on class definitions. Its primary responsibility is to create a mapping that associates each method (function) name with the class it belongs to, while also storing the source code of each class. This class serves as a first-pass visitor, assuming that function names are unique across all classes in the analyzed code, and provides a structured way to extract and organize this information for further analysis or processing.",
            "additionalInfoShort": "The `ClassFunctionVisitor` class traverses a Python code's Abstract Syntax Tree to map method names to their respective classes and store the source code of each class, assuming function names are unique across classes for further analysis.",
            "hidden": false
        },
        {
            "id": "3",
            "label": "DependencyVisitor",
            "additionalInfoLong": "**Purpose:** The `DependencyVisitor` class is designed to analyze the Abstract Syntax Tree (AST) of Python code, specifically focusing on class methods to determine the interdependencies among classes based on function calls. It operates as a visitor that traverses the AST, utilizing a mapping of functions to their corresponding classes obtained from an earlier scan of the code. By tracking which classes call which functions (and consequently other classes) during method execution, it builds a comprehensive map of class dependencies, which can be useful for various aspects of software analysis, such as understanding coupling and impact assessments during refactoring.",
            "additionalInfoShort": "The `DependencyVisitor` class analyzes the Abstract Syntax Tree (AST) of Python code to map class dependencies through method calls, aiding in software analysis like coupling and impact assessments during refactoring.",
            "hidden": false
        },
        {
            "id": "4",
            "label": "OpenAIChatClient",
            "additionalInfoLong": "**Purpose:** The `OpenAIChatClient` class is designed to facilitate interactions with the OpenAI API by initializing a client with an API key, sending user input to request chat completions from a specified model, and handling errors that may occur during API calls. It serves not only to manage the connection to the API but also to process user requests and retrieve AI-generated responses in a user-friendly format, thereby enabling applications that require conversational AI capabilities.",
            "additionalInfoShort": "The `OpenAIChatClient` class enables seamless interaction with the OpenAI API by initializing with an API key, facilitating user requests for chat completions, managing API connections, and handling errors to provide user-friendly AI-generated responses.",
            "hidden": false
        },
        {
            "id": "5",
            "label": "Main",
            "additionalInfoLong": "**Purpose:** The `Main` class serves as the entry point for executing the functionality of a software component that analyzes a repository's structure and relationship between classes. It initializes a `RepoParser` to parse the classes and their dependencies from a specified directory, constructs a representation of these dependencies, and subsequently utilizes an `OutputReformatter` to generate a structured output of the class data. Finally, it saves this structured representation in JSON format, facilitating further analysis or visualization of the class relationships within the codebase.",
            "additionalInfoShort": "The `Main` class acts as the entry point for a software component that analyzes a repository's class structure and relationships by initializing a `RepoParser` to extract class dependencies, reformatting the output with an `OutputReformatter`, and saving the structured data in JSON format for further analysis or visualization.",
            "hidden": false
        },
        {
            "id": "6",
            "label": "OutputReformatter",
            "additionalInfoLong": "**Purpose:** The `OutputReformatter` class is designed to transform a given dictionary of class information into a structured format suitable for graph representation, specifically for visualizing class dependencies and their descriptions. It manages nodes and edges by extracting class names, descriptions, and dependencies from the provided dictionary, allowing for generating a clear and organized output for further use, such as saving to a JSON file for graphical output or analysis.",
            "additionalInfoShort": "The `OutputReformatter` class transforms a dictionary of class information into a structured format for graph representation by extracting class names, descriptions, and dependencies, facilitating organized output for visualization and analysis.",
            "hidden": false
        }
    ],
    "edges": [
        {
            "id": "e1",
            "source": "1",
            "target": "4"
        },
        {
            "id": "e2",
            "source": "5",
            "target": "1"
        },
        {
            "id": "e3",
            "source": "5",
            "target": "6"
        }
    ]
}
